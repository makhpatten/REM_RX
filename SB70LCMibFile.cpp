/* Autogenerated MIB source file */
#include <predef.h>
#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <startnet.h>
#include <ucos.h>
#include <udp.h>
#include <counters.h>
#include <utils.h>
#include <system.h>

#include <snmp.h>
#ifdef SNMP
#include <asn1.h>
#include <snmp_table.h>
#endif
#include "serialburnerdata.h"


#ifdef SNMP


/* Read function prototypes.*/
snmp_typeString ReadFuncREADCOMMUNITY();
snmp_typeString ReadFuncWRITECOMMUNITY();
snmp_typeIpAddr ReadFuncTRAPDESTINATION();
snmp_typeINTEGER ReadFuncSB70LCDataBaudRate();
snmp_typeINTEGER ReadFuncSB70LCOutputBits();
snmp_typeINTEGER ReadFuncSB70LCOutputStop();
snmp_typeEnumVal ReadFuncSB70LCOutputParity();
snmp_typeEnumVal ReadFuncSB70LCSerialMode();
snmp_typeEnumVal ReadFuncSB70LCFlowMode();
snmp_typeINTEGER ReadFuncSB70LCConnectIdleTimeout();
snmp_typeINTEGER ReadFuncSB70LCListenIdleTimeout();
snmp_typeINTEGER ReadFuncSB70LCNewConnectionTimeout();
snmp_typeINTEGER ReadFuncSB70LCConnectionRetryTimeout();
snmp_typeString ReadFuncSB70LCConnectName();
snmp_typeINTEGER ReadFuncSB70LCListenPort();
snmp_typeINTEGER ReadFuncSB70LCConnectPort();
snmp_typeEnumVal ReadFuncSB70LCConnectMode();
snmp_typeString ReadFuncSB70LCDHCPName();


/* Write function prototypes.*/
int WriteFuncREADCOMMUNITY( snmp_typeString    var, int bTest );
int WriteFuncWRITECOMMUNITY( snmp_typeString    var, int bTest );
int WriteFuncTRAPDESTINATION( snmp_typeIpAddr    var, int bTest );
int WriteFuncSB70LCDataBaudRate( snmp_typeINTEGER   var, int bTest );
int WriteFuncSB70LCOutputBits( snmp_typeINTEGER   var, int bTest );
int WriteFuncSB70LCOutputStop( snmp_typeINTEGER   var, int bTest );
int WriteFuncSB70LCOutputParity( snmp_typeEnumVal   var, int bTest );
int WriteFuncSB70LCSerialMode( snmp_typeEnumVal   var, int bTest );
int WriteFuncSB70LCFlowMode( snmp_typeEnumVal   var, int bTest );
int WriteFuncSB70LCConnectIdleTimeout( snmp_typeINTEGER   var, int bTest );
int WriteFuncSB70LCListenIdleTimeout( snmp_typeINTEGER   var, int bTest );
int WriteFuncSB70LCNewConnectionTimeout( snmp_typeINTEGER   var, int bTest );
int WriteFuncSB70LCConnectionRetryTimeout( snmp_typeINTEGER   var, int bTest );
int WriteFuncSB70LCConnectName( snmp_typeString    var, int bTest );
int WriteFuncSB70LCListenPort( snmp_typeINTEGER   var, int bTest );
int WriteFuncSB70LCConnectPort( snmp_typeINTEGER   var, int bTest );
int WriteFuncSB70LCConnectMode( snmp_typeEnumVal   var, int bTest );
int WriteFuncSB70LCDHCPName( snmp_typeString    var, int bTest );


/* Read Table pointer definition*/
SNMPREADFUNC( READCOMMUNITY,
              "1.3.6.1.4.1.8174.1.0",
              ASN_typeString,
              ReadFuncREADCOMMUNITY,
              READ_COMMUNITY_MASK );
SNMPREADFUNC( WRITECOMMUNITY,
              "1.3.6.1.4.1.8174.2.0",
              ASN_typeString,
              ReadFuncWRITECOMMUNITY,
              WRITE_COMMUNITY_MASK );
SNMPREADFUNC( TRAPDESTINATION,
              "1.3.6.1.4.1.8174.3.0",
              ASN_typeIpAddr,
              ReadFuncTRAPDESTINATION,
              READ_COMMUNITY_MASK );
SNMPREADFUNC( SB70LCDataBaudRate,
              "1.3.6.1.4.1.8174.70.1.0",
              ASN_typeINTEGER,
              ReadFuncSB70LCDataBaudRate,
              READ_COMMUNITY_MASK );
SNMPREADFUNC( SB70LCOutputBits,
              "1.3.6.1.4.1.8174.70.2.0",
              ASN_typeINTEGER,
              ReadFuncSB70LCOutputBits,
              READ_COMMUNITY_MASK );
SNMPREADFUNC( SB70LCOutputStop,
              "1.3.6.1.4.1.8174.70.3.0",
              ASN_typeINTEGER,
              ReadFuncSB70LCOutputStop,
              READ_COMMUNITY_MASK );
SNMPREADFUNC( SB70LCOutputParity,
              "1.3.6.1.4.1.8174.70.4.0",
              ASN_typeEnumVal,
              ReadFuncSB70LCOutputParity,
              READ_COMMUNITY_MASK );
SNMPREADFUNC( SB70LCSerialMode,
              "1.3.6.1.4.1.8174.70.5.0",
              ASN_typeEnumVal,
              ReadFuncSB70LCSerialMode,
              READ_COMMUNITY_MASK );
SNMPREADFUNC( SB70LCFlowMode,
              "1.3.6.1.4.1.8174.70.6.0",
              ASN_typeEnumVal,
              ReadFuncSB70LCFlowMode,
              READ_COMMUNITY_MASK );
SNMPREADFUNC( SB70LCConnectIdleTimeout,
              "1.3.6.1.4.1.8174.70.7.0",
              ASN_typeINTEGER,
              ReadFuncSB70LCConnectIdleTimeout,
              READ_COMMUNITY_MASK );
SNMPREADFUNC( SB70LCListenIdleTimeout,
              "1.3.6.1.4.1.8174.70.8.0",
              ASN_typeINTEGER,
              ReadFuncSB70LCListenIdleTimeout,
              READ_COMMUNITY_MASK );
SNMPREADFUNC( SB70LCNewConnectionTimeout,
              "1.3.6.1.4.1.8174.70.9.0",
              ASN_typeINTEGER,
              ReadFuncSB70LCNewConnectionTimeout,
              READ_COMMUNITY_MASK );
SNMPREADFUNC( SB70LCConnectionRetryTimeout,
              "1.3.6.1.4.1.8174.70.10.0",
              ASN_typeINTEGER,
              ReadFuncSB70LCConnectionRetryTimeout,
              READ_COMMUNITY_MASK );
SNMPREADFUNC( SB70LCConnectName,
              "1.3.6.1.4.1.8174.70.11.0",
              ASN_typeString,
              ReadFuncSB70LCConnectName,
              READ_COMMUNITY_MASK );
SNMPREADFUNC( SB70LCListenPort,
              "1.3.6.1.4.1.8174.70.12.0",
              ASN_typeINTEGER,
              ReadFuncSB70LCListenPort,
              READ_COMMUNITY_MASK );
SNMPREADFUNC( SB70LCConnectPort,
              "1.3.6.1.4.1.8174.70.13.0",
              ASN_typeINTEGER,
              ReadFuncSB70LCConnectPort,
              READ_COMMUNITY_MASK );
SNMPREADFUNC( SB70LCConnectMode,
              "1.3.6.1.4.1.8174.70.14.0",
              ASN_typeEnumVal,
              ReadFuncSB70LCConnectMode,
              READ_COMMUNITY_MASK );
SNMPREADFUNC( SB70LCDHCPName,
              "1.3.6.1.4.1.8174.70.15.0",
              ASN_typeString,
              ReadFuncSB70LCDHCPName,
              READ_COMMUNITY_MASK );


/* Write Table pointer definition*/
SNMPWRITEFUNC( READCOMMUNITY,
               "1.3.6.1.4.1.8174.1.0",
               ASN_typeString,
               WriteFuncREADCOMMUNITY,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( WRITECOMMUNITY,
               "1.3.6.1.4.1.8174.2.0",
               ASN_typeString,
               WriteFuncWRITECOMMUNITY,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( TRAPDESTINATION,
               "1.3.6.1.4.1.8174.3.0",
               ASN_typeIpAddr,
               WriteFuncTRAPDESTINATION,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( SB70LCDataBaudRate,
               "1.3.6.1.4.1.8174.70.1.0",
               ASN_typeINTEGER,
               WriteFuncSB70LCDataBaudRate,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( SB70LCOutputBits,
               "1.3.6.1.4.1.8174.70.2.0",
               ASN_typeINTEGER,
               WriteFuncSB70LCOutputBits,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( SB70LCOutputStop,
               "1.3.6.1.4.1.8174.70.3.0",
               ASN_typeINTEGER,
               WriteFuncSB70LCOutputStop,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( SB70LCOutputParity,
               "1.3.6.1.4.1.8174.70.4.0",
               ASN_typeEnumVal,
               WriteFuncSB70LCOutputParity,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( SB70LCSerialMode,
               "1.3.6.1.4.1.8174.70.5.0",
               ASN_typeEnumVal,
               WriteFuncSB70LCSerialMode,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( SB70LCFlowMode,
               "1.3.6.1.4.1.8174.70.6.0",
               ASN_typeEnumVal,
               WriteFuncSB70LCFlowMode,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( SB70LCConnectIdleTimeout,
               "1.3.6.1.4.1.8174.70.7.0",
               ASN_typeINTEGER,
               WriteFuncSB70LCConnectIdleTimeout,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( SB70LCListenIdleTimeout,
               "1.3.6.1.4.1.8174.70.8.0",
               ASN_typeINTEGER,
               WriteFuncSB70LCListenIdleTimeout,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( SB70LCNewConnectionTimeout,
               "1.3.6.1.4.1.8174.70.9.0",
               ASN_typeINTEGER,
               WriteFuncSB70LCNewConnectionTimeout,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( SB70LCConnectionRetryTimeout,
               "1.3.6.1.4.1.8174.70.10.0",
               ASN_typeINTEGER,
               WriteFuncSB70LCConnectionRetryTimeout,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( SB70LCConnectName,
               "1.3.6.1.4.1.8174.70.11.0",
               ASN_typeString,
               WriteFuncSB70LCConnectName,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( SB70LCListenPort,
               "1.3.6.1.4.1.8174.70.12.0",
               ASN_typeINTEGER,
               WriteFuncSB70LCListenPort,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( SB70LCConnectPort,
               "1.3.6.1.4.1.8174.70.13.0",
               ASN_typeINTEGER,
               WriteFuncSB70LCConnectPort,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( SB70LCConnectMode,
               "1.3.6.1.4.1.8174.70.14.0",
               ASN_typeEnumVal,
               WriteFuncSB70LCConnectMode,
               WRITE_COMMUNITY_MASK );
SNMPWRITEFUNC( SB70LCDHCPName,
               "1.3.6.1.4.1.8174.70.15.0",
               ASN_typeString,
               WriteFuncSB70LCDHCPName,
               WRITE_COMMUNITY_MASK );


void CloseEverything();


NV_SettingsStruct Tmp_Settings;

int Test_Cnt;
int Do_Cnt;
DWORD last_start_Time;
BOOL bSetup_Changed;


void ProcessSetTest()
{
   if ( ( last_start_Time + 30 ) < TimeTick )
   {
      Test_Cnt = 0;
      Do_Cnt = 0;
      last_start_Time = TimeTick;
      bSetup_Changed = FALSE;
   }
   if ( Test_Cnt == 0 )
   {
      Tmp_Settings = NV_Settings;
   }

   Test_Cnt++;
}

void ProcessSetDo()
{
   Do_Cnt++;
   if ( Do_Cnt == Test_Cnt )
   {
      Do_Cnt = Test_Cnt = 0;
      last_start_Time = TimeTick;
      /* We now need to save the new settings */
      if ( bSetup_Changed )
      {
         CloseEverything();
         Settings_Changed = TRUE;
         /* IF the serial port changed change it */
         if ( Tmp_Settings.SerialMode != NV_Settings.SerialMode )
         {
            BYTE port = 0;
            if ( Tmp_Settings.SerialMode == SERIAL_MODE_RS232_DATA_ON_PORT0 )
            {
               port = 1;
            }

            if ( gConfigRec.ser_boot != port )
            {
               ConfigRecord new_rec;
               memcpy( &new_rec, &gConfigRec, sizeof( new_rec ) );
               new_rec.ser_boot = port;
               UpdateConfigRecord( &new_rec );
            }
         }
      }
      NV_Settings = Tmp_Settings;
      SaveUserParameters( &NV_Settings, sizeof( NV_Settings ) );
      bSetup_Changed = FALSE;
   }
}




/* Function implmentation*/
/*Variable : -RW- String    READCOMMUNITY(1)-1.3.6.1.4.1.8174.1.*/
/*Size/Range: 1..255*/
snmp_typeString ReadFuncREADCOMMUNITY()
{
   const SysInfo *pInfo = GetSysInfo();
   if ( pInfo )
   {
      return ( const char * ) pInfo->ReadCommunity;
   }
   else
   {
      return "";
   }
}




int WriteFuncREADCOMMUNITY( snmp_typeString    var, int bTest )
{
   if ( bTest )
   {
      if ( ( strlen( var ) >= 40 ) )
      {
         return SNMP_SET_FAIL;
      }
      ProcessSetTest();
   }
   else
   {
      strncpy( ( char * ) Tmp_Settings.SysInfoData.ReadCommunity, var, 40 );
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}


/*Variable : -RW- String    WRITECOMMUNITY(2)-1.3.6.1.4.1.8174.2.*/
/*Size/Range: 1..255*/
snmp_typeString ReadFuncWRITECOMMUNITY()
{
   const SysInfo *pInfo = GetSysInfo();
   if ( pInfo )
   {
      return ( const char * ) pInfo->WriteCommunity;
   }
   else
   {
      return "";
   }
}




int WriteFuncWRITECOMMUNITY( snmp_typeString    var, int bTest )
{
   if ( bTest )
   {
      if ( ( strlen( var ) >= 40 ) )
      {
         return SNMP_SET_FAIL;
      }
      ProcessSetTest();
   }
   else
   {
      strncpy( ( char * ) Tmp_Settings.SysInfoData.WriteCommunity, var, 40 );
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}




/*Variable : -RW- IpAddr    TRAPDESTINATION(3)-1.3.6.1.4.1.8174.3.*/
snmp_typeIpAddr ReadFuncTRAPDESTINATION()
{
   const SysInfo *pInfo = GetSysInfo();
   if ( pInfo )
   {
      return pInfo->trap_destination;
   }
   else
   {
      return 0;
   }
}




int WriteFuncTRAPDESTINATION( snmp_typeIpAddr    var, int bTest )
{
   if ( bTest )
   {
      ProcessSetTest();
   }
   else
   {
      Tmp_Settings.SysInfoData.trap_destination = var;
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}



/*Variable : -RW- INTEGER   SB70LCDataBaudRate(1)-1.3.6.1.4.1.8174.70.1.*/
/*Size/Range: 300..115200*/
snmp_typeINTEGER ReadFuncSB70LCDataBaudRate()
{
   return NV_Settings.DataBaudRate;
}




int WriteFuncSB70LCDataBaudRate( snmp_typeINTEGER   var, int bTest )
{
   if ( bTest )
   {
      if ( ( var < 300 ) || ( var > 115200 ) )
      {
         return SNMP_SET_FAIL;
      }
      ProcessSetTest();
   }
   else
   {
      Tmp_Settings.DataBaudRate = var;
      bSetup_Changed = TRUE;
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}





/*Variable : -RW- INTEGER   SB70LCOutputBits(2)-1.3.6.1.4.1.8174.70.2.*/
/*Size/Range: 6..8*/
snmp_typeINTEGER ReadFuncSB70LCOutputBits()
{
   return NV_Settings.Output_Bits;
}




int WriteFuncSB70LCOutputBits( snmp_typeINTEGER   var, int bTest )
{
   if ( bTest )
   {
      if ( ( var < 6 ) || ( var > 8 ) )
      {
         return SNMP_SET_FAIL;
      }
      ProcessSetTest();
   }
   else
   {
      Tmp_Settings.Output_Bits = var;
      bSetup_Changed = TRUE;
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}




/*Variable : -RW- INTEGER   SB70LCOutputStop(3)-1.3.6.1.4.1.8174.70.3.*/
/*Size/Range: 1..2*/
snmp_typeINTEGER ReadFuncSB70LCOutputStop()
{
   return NV_Settings.Output_Stop;
}




int WriteFuncSB70LCOutputStop( snmp_typeINTEGER   var, int bTest )
{
   if ( bTest )
   {
      if ( ( var < 1 ) || ( var > 2 ) )
      {
         return SNMP_SET_FAIL;
      }
      ProcessSetTest();
   }
   else
   {
      Tmp_Settings.Output_Stop = var;
      bSetup_Changed = TRUE;
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}




/*Variable : -RW- EnumVal   SB70LCOutputParity(4)-1.3.6.1.4.1.8174.70.4.*/
/*Values: none(1), even(2), odd(3)*/
snmp_typeEnumVal ReadFuncSB70LCOutputParity()
{
   return NV_Settings.Output_Parity;
}




int WriteFuncSB70LCOutputParity( snmp_typeEnumVal   var, int bTest )
{
   if ( bTest )
   {
      if ( ( var < 1 ) || ( var > 3 ) )
      {
         return SNMP_SET_FAIL;
      }
      ProcessSetTest();
   }
   else
   {
      Tmp_Settings.Output_Parity = var;
      bSetup_Changed = TRUE;
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}




/*Variable : -RW- EnumVal   SB70LCSerialMode(5)-1.3.6.1.4.1.8174.70.5.*/
/*Values: Rs232DataOnPort1(1), Rs232DataOnPort0(2), Rs485HalfDataOnPort0(3), Rs485FullDataOnPort0(4)*/
snmp_typeEnumVal ReadFuncSB70LCSerialMode()
{
   return NV_Settings.SerialMode;
}




int WriteFuncSB70LCSerialMode( snmp_typeEnumVal   var, int bTest )
{
   if ( bTest )
   {
      if ( ( var < 1 ) || ( var > 3 ) )
      {
         return SNMP_SET_FAIL;
      }
      ProcessSetTest();
   }
   else
   {
      Tmp_Settings.SerialMode = var;
      bSetup_Changed = TRUE;
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}




/*Variable : -RW- EnumVal   SB70LCFlowMode(6)-1.3.6.1.4.1.8174.70.6.*/
/*Values: None(1), XonXoff(2), RtsCts(3)*/
snmp_typeEnumVal ReadFuncSB70LCFlowMode()
{
   return NV_Settings.FlowMode;
}




int WriteFuncSB70LCFlowMode( snmp_typeEnumVal   var, int bTest )
{
   if ( bTest )
   {
      if ( ( var < 1 ) || ( var > 3 ) )
      {
         return SNMP_SET_FAIL;
      }
      ProcessSetTest();
   }
   else
   {
      Tmp_Settings.FlowMode = var;
      bSetup_Changed = TRUE;
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}




/*Variable : -RW- INTEGER   SB70LCConnectIdleTimeout(7)-1.3.6.1.4.1.8174.70.7.*/
/*Size/Range: 0..65535*/
snmp_typeINTEGER ReadFuncSB70LCConnectIdleTimeout()
{
   return NV_Settings.connect_idle_timeout;
}





int WriteFuncSB70LCConnectIdleTimeout( snmp_typeINTEGER   var, int bTest )
{
   if ( bTest )
   {
      if ( ( var < 0 ) || ( var > 65535 ) )
      {
         return SNMP_SET_FAIL;
      }
      ProcessSetTest();
   }
   else
   {
      Tmp_Settings.connect_idle_timeout = var;
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}




/*Variable : -RW- INTEGER   SB70LCListenIdleTimeout(8)-1.3.6.1.4.1.8174.70.8.*/
/*Size/Range: 0..65535*/
snmp_typeINTEGER ReadFuncSB70LCListenIdleTimeout()
{
   return NV_Settings.listen_idle_timeout;
}




int WriteFuncSB70LCListenIdleTimeout( snmp_typeINTEGER   var, int bTest )
{
   if ( bTest )
   {
      if ( ( var < 0 ) || ( var > 65535 ) )
      {
         return SNMP_SET_FAIL;
      }
      ProcessSetTest();
   }
   else
   {
      Tmp_Settings.listen_idle_timeout = var;
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}




/*Variable : -RW- INTEGER   SB70LCNewConnectionTimeout(9)-1.3.6.1.4.1.8174.70.9.*/
/*Size/Range: 0..65535*/
snmp_typeINTEGER ReadFuncSB70LCNewConnectionTimeout()
{
   return NV_Settings.new_connection_timeout;
}




int WriteFuncSB70LCNewConnectionTimeout( snmp_typeINTEGER   var, int bTest )
{
   if ( bTest )
   {
      if ( ( var < 0 ) || ( var > 65535 ) )
      {
         return SNMP_SET_FAIL;
      }
      ProcessSetTest();
   }
   else
   {
      Tmp_Settings.new_connection_timeout = var;
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}




/*Variable : -RW- INTEGER   SB70LCConnectionRetryTimeout(10)-1.3.6.1.4.1.8174.70.10.*/
/*Size/Range: 10..65535*/
snmp_typeINTEGER ReadFuncSB70LCConnectionRetryTimeout()
{
   return NV_Settings.connection_retry_timeout;
}




int WriteFuncSB70LCConnectionRetryTimeout( snmp_typeINTEGER   var, int bTest )
{
   if ( bTest )
   {
      if ( ( var < 0 ) || ( var > 65535 ) )
      {
         return SNMP_SET_FAIL;
      }
      ProcessSetTest();
   }
   else
   {
      Tmp_Settings.connection_retry_timeout = var;
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}


/*Variable : -RW- String    SB70LCConnectName(11)-1.3.6.1.4.1.8174.70.11.*/
/*Size/Range: 1..40*/
snmp_typeString ReadFuncSB70LCConnectName()
{
   return NV_Settings.ConnectName;
}




int WriteFuncSB70LCConnectName( snmp_typeString    var, int bTest )
{
   if ( bTest )
   {
      ProcessSetTest();
   }
   else
   {
      strncpy( Tmp_Settings.ConnectName, var, 80 );
      bSetup_Changed = TRUE;
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}


/*Variable : -RW- INTEGER   SB70LCListenPort(12)-1.3.6.1.4.1.8174.70.12.*/
/*Size/Range: 1..65535*/
snmp_typeINTEGER ReadFuncSB70LCListenPort()
{
   return NV_Settings.ListenPort;
}



int WriteFuncSB70LCListenPort( snmp_typeINTEGER   var, int bTest )
{
   if ( bTest )
   {
      if ( ( var < 1 ) || ( var > 65535 ) )
      {
         return SNMP_SET_FAIL;
      }
      ProcessSetTest();
   }
   else
   {
      Tmp_Settings.ListenPort = var;
      bSetup_Changed = TRUE;
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}




/*Variable : -RW- INTEGER   SB70LCConnectPort(13)-1.3.6.1.4.1.8174.70.13.*/
/*Size/Range: 1..65535*/
snmp_typeINTEGER ReadFuncSB70LCConnectPort()
{
   return NV_Settings.ConnectPort;
}




int WriteFuncSB70LCConnectPort( snmp_typeINTEGER   var, int bTest )
{
   if ( bTest )
   {
      if ( ( var < 1 ) || ( var > 65535 ) )
      {
         return SNMP_SET_FAIL;
      }
      ProcessSetTest();
   }
   else
   {
      Tmp_Settings.ConnectPort = var;
      bSetup_Changed = TRUE;
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}




/*Variable : -RW- EnumVal   SB70LCConnectMode(14)-1.3.6.1.4.1.8174.70.14.*/
/*Values: Never(1), AtPowerup(2), whenDataReceived(3)*/
snmp_typeEnumVal ReadFuncSB70LCConnectMode()
{
   return NV_Settings.ConnectMode;
}




int WriteFuncSB70LCConnectMode( snmp_typeEnumVal   var, int bTest )
{
   if ( bTest )
   {
      if ( ( var < 1 ) || ( var > 3 ) )
      {
         return SNMP_SET_FAIL;
      }
      ProcessSetTest();
   }
   else
   {
      Tmp_Settings.ConnectMode = var;
      bSetup_Changed = TRUE;
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}




/*Variable : -RW- String    SB70LCDHCPName(15)-1.3.6.1.4.1.8174.70.15.*/
/*Size/Range: 1..40*/
snmp_typeString ReadFuncSB70LCDHCPName()
{
   return NV_Settings.DeviceName;
}




int WriteFuncSB70LCDHCPName( snmp_typeString    var, int bTest )
{
   if ( bTest )
   {
      ProcessSetTest();
   }
   else
   {
      strncpy( Tmp_Settings.DeviceName, var, 40 );
      ProcessSetDo();
   }
   return SNMP_SET_OK;
}

#endif
